// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dfs-service.proto
#ifndef GRPC_dfs_2dservice_2eproto__INCLUDED
#define GRPC_dfs_2dservice_2eproto__INCLUDED

#include "dfs-service.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class Channel;
class CompletionQueue;
class ServerCompletionQueue;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc_impl

namespace grpc {
class ServerContext;
}  // namespace grpc

namespace dfs_service {

class DFSService final {
 public:
  static constexpr char const* service_full_name() {
    return "dfs_service.DFSService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Add your service calls here
    //
    // 1. REQUIRED (Parts 1 & 2): A method to store files on the server
    std::unique_ptr< ::grpc::ClientWriterInterface< ::dfs_service::File>> StoreFile(::grpc::ClientContext* context, ::dfs_service::Empty* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::dfs_service::File>>(StoreFileRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::dfs_service::File>> AsyncStoreFile(::grpc::ClientContext* context, ::dfs_service::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::dfs_service::File>>(AsyncStoreFileRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::dfs_service::File>> PrepareAsyncStoreFile(::grpc::ClientContext* context, ::dfs_service::Empty* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::dfs_service::File>>(PrepareAsyncStoreFileRaw(context, response, cq));
    }
    // 2. REQUIRED (Parts 1 & 2): A method to fetch files from the server
    std::unique_ptr< ::grpc::ClientReaderInterface< ::dfs_service::File>> FetchFile(::grpc::ClientContext* context, const ::dfs_service::request& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::dfs_service::File>>(FetchFileRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::dfs_service::File>> AsyncFetchFile(::grpc::ClientContext* context, const ::dfs_service::request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::dfs_service::File>>(AsyncFetchFileRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::dfs_service::File>> PrepareAsyncFetchFile(::grpc::ClientContext* context, const ::dfs_service::request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::dfs_service::File>>(PrepareAsyncFetchFileRaw(context, request, cq));
    }
    // 3. REQUIRED (Parts 1 & 2): A method to list all files on the server
    std::unique_ptr< ::grpc::ClientReaderInterface< ::dfs_service::File>> ListFiles(::grpc::ClientContext* context, const ::dfs_service::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::dfs_service::File>>(ListFilesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::dfs_service::File>> AsyncListFiles(::grpc::ClientContext* context, const ::dfs_service::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::dfs_service::File>>(AsyncListFilesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::dfs_service::File>> PrepareAsyncListFiles(::grpc::ClientContext* context, const ::dfs_service::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::dfs_service::File>>(PrepareAsyncListFilesRaw(context, request, cq));
    }
    // 4. REQUIRED (Parts 1 & 2): A method to get the status of a file on the server
    virtual ::grpc::Status GetAtt(::grpc::ClientContext* context, const ::dfs_service::request& request, ::dfs_service::File* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs_service::File>> AsyncGetAtt(::grpc::ClientContext* context, const ::dfs_service::request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs_service::File>>(AsyncGetAttRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs_service::File>> PrepareAsyncGetAtt(::grpc::ClientContext* context, const ::dfs_service::request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::dfs_service::File>>(PrepareAsyncGetAttRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Add your service calls here
      //
      // 1. REQUIRED (Parts 1 & 2): A method to store files on the server
      virtual void StoreFile(::grpc::ClientContext* context, ::dfs_service::Empty* response, ::grpc::experimental::ClientWriteReactor< ::dfs_service::File>* reactor) = 0;
      // 2. REQUIRED (Parts 1 & 2): A method to fetch files from the server
      virtual void FetchFile(::grpc::ClientContext* context, ::dfs_service::request* request, ::grpc::experimental::ClientReadReactor< ::dfs_service::File>* reactor) = 0;
      // 3. REQUIRED (Parts 1 & 2): A method to list all files on the server
      virtual void ListFiles(::grpc::ClientContext* context, ::dfs_service::Empty* request, ::grpc::experimental::ClientReadReactor< ::dfs_service::File>* reactor) = 0;
      // 4. REQUIRED (Parts 1 & 2): A method to get the status of a file on the server
      virtual void GetAtt(::grpc::ClientContext* context, const ::dfs_service::request* request, ::dfs_service::File* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAtt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs_service::File* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAtt(::grpc::ClientContext* context, const ::dfs_service::request* request, ::dfs_service::File* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetAtt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs_service::File* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientWriterInterface< ::dfs_service::File>* StoreFileRaw(::grpc::ClientContext* context, ::dfs_service::Empty* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::dfs_service::File>* AsyncStoreFileRaw(::grpc::ClientContext* context, ::dfs_service::Empty* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::dfs_service::File>* PrepareAsyncStoreFileRaw(::grpc::ClientContext* context, ::dfs_service::Empty* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::dfs_service::File>* FetchFileRaw(::grpc::ClientContext* context, const ::dfs_service::request& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::dfs_service::File>* AsyncFetchFileRaw(::grpc::ClientContext* context, const ::dfs_service::request& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::dfs_service::File>* PrepareAsyncFetchFileRaw(::grpc::ClientContext* context, const ::dfs_service::request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::dfs_service::File>* ListFilesRaw(::grpc::ClientContext* context, const ::dfs_service::Empty& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::dfs_service::File>* AsyncListFilesRaw(::grpc::ClientContext* context, const ::dfs_service::Empty& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::dfs_service::File>* PrepareAsyncListFilesRaw(::grpc::ClientContext* context, const ::dfs_service::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dfs_service::File>* AsyncGetAttRaw(::grpc::ClientContext* context, const ::dfs_service::request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::dfs_service::File>* PrepareAsyncGetAttRaw(::grpc::ClientContext* context, const ::dfs_service::request& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientWriter< ::dfs_service::File>> StoreFile(::grpc::ClientContext* context, ::dfs_service::Empty* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::dfs_service::File>>(StoreFileRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::dfs_service::File>> AsyncStoreFile(::grpc::ClientContext* context, ::dfs_service::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::dfs_service::File>>(AsyncStoreFileRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::dfs_service::File>> PrepareAsyncStoreFile(::grpc::ClientContext* context, ::dfs_service::Empty* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::dfs_service::File>>(PrepareAsyncStoreFileRaw(context, response, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::dfs_service::File>> FetchFile(::grpc::ClientContext* context, const ::dfs_service::request& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::dfs_service::File>>(FetchFileRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::dfs_service::File>> AsyncFetchFile(::grpc::ClientContext* context, const ::dfs_service::request& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::dfs_service::File>>(AsyncFetchFileRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::dfs_service::File>> PrepareAsyncFetchFile(::grpc::ClientContext* context, const ::dfs_service::request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::dfs_service::File>>(PrepareAsyncFetchFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::dfs_service::File>> ListFiles(::grpc::ClientContext* context, const ::dfs_service::Empty& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::dfs_service::File>>(ListFilesRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::dfs_service::File>> AsyncListFiles(::grpc::ClientContext* context, const ::dfs_service::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::dfs_service::File>>(AsyncListFilesRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::dfs_service::File>> PrepareAsyncListFiles(::grpc::ClientContext* context, const ::dfs_service::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::dfs_service::File>>(PrepareAsyncListFilesRaw(context, request, cq));
    }
    ::grpc::Status GetAtt(::grpc::ClientContext* context, const ::dfs_service::request& request, ::dfs_service::File* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs_service::File>> AsyncGetAtt(::grpc::ClientContext* context, const ::dfs_service::request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs_service::File>>(AsyncGetAttRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs_service::File>> PrepareAsyncGetAtt(::grpc::ClientContext* context, const ::dfs_service::request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::dfs_service::File>>(PrepareAsyncGetAttRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void StoreFile(::grpc::ClientContext* context, ::dfs_service::Empty* response, ::grpc::experimental::ClientWriteReactor< ::dfs_service::File>* reactor) override;
      void FetchFile(::grpc::ClientContext* context, ::dfs_service::request* request, ::grpc::experimental::ClientReadReactor< ::dfs_service::File>* reactor) override;
      void ListFiles(::grpc::ClientContext* context, ::dfs_service::Empty* request, ::grpc::experimental::ClientReadReactor< ::dfs_service::File>* reactor) override;
      void GetAtt(::grpc::ClientContext* context, const ::dfs_service::request* request, ::dfs_service::File* response, std::function<void(::grpc::Status)>) override;
      void GetAtt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs_service::File* response, std::function<void(::grpc::Status)>) override;
      void GetAtt(::grpc::ClientContext* context, const ::dfs_service::request* request, ::dfs_service::File* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetAtt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs_service::File* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientWriter< ::dfs_service::File>* StoreFileRaw(::grpc::ClientContext* context, ::dfs_service::Empty* response) override;
    ::grpc::ClientAsyncWriter< ::dfs_service::File>* AsyncStoreFileRaw(::grpc::ClientContext* context, ::dfs_service::Empty* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::dfs_service::File>* PrepareAsyncStoreFileRaw(::grpc::ClientContext* context, ::dfs_service::Empty* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::dfs_service::File>* FetchFileRaw(::grpc::ClientContext* context, const ::dfs_service::request& request) override;
    ::grpc::ClientAsyncReader< ::dfs_service::File>* AsyncFetchFileRaw(::grpc::ClientContext* context, const ::dfs_service::request& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::dfs_service::File>* PrepareAsyncFetchFileRaw(::grpc::ClientContext* context, const ::dfs_service::request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::dfs_service::File>* ListFilesRaw(::grpc::ClientContext* context, const ::dfs_service::Empty& request) override;
    ::grpc::ClientAsyncReader< ::dfs_service::File>* AsyncListFilesRaw(::grpc::ClientContext* context, const ::dfs_service::Empty& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::dfs_service::File>* PrepareAsyncListFilesRaw(::grpc::ClientContext* context, const ::dfs_service::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dfs_service::File>* AsyncGetAttRaw(::grpc::ClientContext* context, const ::dfs_service::request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::dfs_service::File>* PrepareAsyncGetAttRaw(::grpc::ClientContext* context, const ::dfs_service::request& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_StoreFile_;
    const ::grpc::internal::RpcMethod rpcmethod_FetchFile_;
    const ::grpc::internal::RpcMethod rpcmethod_ListFiles_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAtt_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Add your service calls here
    //
    // 1. REQUIRED (Parts 1 & 2): A method to store files on the server
    virtual ::grpc::Status StoreFile(::grpc::ServerContext* context, ::grpc::ServerReader< ::dfs_service::File>* reader, ::dfs_service::Empty* response);
    // 2. REQUIRED (Parts 1 & 2): A method to fetch files from the server
    virtual ::grpc::Status FetchFile(::grpc::ServerContext* context, const ::dfs_service::request* request, ::grpc::ServerWriter< ::dfs_service::File>* writer);
    // 3. REQUIRED (Parts 1 & 2): A method to list all files on the server
    virtual ::grpc::Status ListFiles(::grpc::ServerContext* context, const ::dfs_service::Empty* request, ::grpc::ServerWriter< ::dfs_service::File>* writer);
    // 4. REQUIRED (Parts 1 & 2): A method to get the status of a file on the server
    virtual ::grpc::Status GetAtt(::grpc::ServerContext* context, const ::dfs_service::request* request, ::dfs_service::File* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_StoreFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_StoreFile() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_StoreFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoreFile(::grpc::ServerContext* context, ::grpc::ServerReader< ::dfs_service::File>* reader, ::dfs_service::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStoreFile(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::dfs_service::Empty, ::dfs_service::File>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FetchFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_FetchFile() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_FetchFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchFile(::grpc::ServerContext* context, const ::dfs_service::request* request, ::grpc::ServerWriter< ::dfs_service::File>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchFile(::grpc::ServerContext* context, ::dfs_service::request* request, ::grpc::ServerAsyncWriter< ::dfs_service::File>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListFiles() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ListFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFiles(::grpc::ServerContext* context, const ::dfs_service::Empty* request, ::grpc::ServerWriter< ::dfs_service::File>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListFiles(::grpc::ServerContext* context, ::dfs_service::Empty* request, ::grpc::ServerAsyncWriter< ::dfs_service::File>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAtt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetAtt() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetAtt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAtt(::grpc::ServerContext* context, const ::dfs_service::request* request, ::dfs_service::File* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAtt(::grpc::ServerContext* context, ::dfs_service::request* request, ::grpc::ServerAsyncResponseWriter< ::dfs_service::File>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_StoreFile<WithAsyncMethod_FetchFile<WithAsyncMethod_ListFiles<WithAsyncMethod_GetAtt<Service > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StoreFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_StoreFile() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackClientStreamingHandler< ::dfs_service::File, ::dfs_service::Empty>(
          [this] { return this->StoreFile(); }));
    }
    ~ExperimentalWithCallbackMethod_StoreFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoreFile(::grpc::ServerContext* context, ::grpc::ServerReader< ::dfs_service::File>* reader, ::dfs_service::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::dfs_service::File, ::dfs_service::Empty>* StoreFile() {
      return new ::grpc::internal::UnimplementedReadReactor<
        ::dfs_service::File, ::dfs_service::Empty>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_FetchFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_FetchFile() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackServerStreamingHandler< ::dfs_service::request, ::dfs_service::File>(
          [this] { return this->FetchFile(); }));
    }
    ~ExperimentalWithCallbackMethod_FetchFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchFile(::grpc::ServerContext* context, const ::dfs_service::request* request, ::grpc::ServerWriter< ::dfs_service::File>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::dfs_service::request, ::dfs_service::File>* FetchFile() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::dfs_service::request, ::dfs_service::File>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ListFiles() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackServerStreamingHandler< ::dfs_service::Empty, ::dfs_service::File>(
          [this] { return this->ListFiles(); }));
    }
    ~ExperimentalWithCallbackMethod_ListFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFiles(::grpc::ServerContext* context, const ::dfs_service::Empty* request, ::grpc::ServerWriter< ::dfs_service::File>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::dfs_service::Empty, ::dfs_service::File>* ListFiles() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::dfs_service::Empty, ::dfs_service::File>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetAtt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetAtt() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::dfs_service::request, ::dfs_service::File>(
          [this](::grpc::ServerContext* context,
                 const ::dfs_service::request* request,
                 ::dfs_service::File* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetAtt(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetAtt(
        ::grpc::experimental::MessageAllocator< ::dfs_service::request, ::dfs_service::File>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::dfs_service::request, ::dfs_service::File>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetAtt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAtt(::grpc::ServerContext* context, const ::dfs_service::request* request, ::dfs_service::File* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetAtt(::grpc::ServerContext* context, const ::dfs_service::request* request, ::dfs_service::File* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_StoreFile<ExperimentalWithCallbackMethod_FetchFile<ExperimentalWithCallbackMethod_ListFiles<ExperimentalWithCallbackMethod_GetAtt<Service > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_StoreFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_StoreFile() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_StoreFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoreFile(::grpc::ServerContext* context, ::grpc::ServerReader< ::dfs_service::File>* reader, ::dfs_service::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FetchFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_FetchFile() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_FetchFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchFile(::grpc::ServerContext* context, const ::dfs_service::request* request, ::grpc::ServerWriter< ::dfs_service::File>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListFiles() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ListFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFiles(::grpc::ServerContext* context, const ::dfs_service::Empty* request, ::grpc::ServerWriter< ::dfs_service::File>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAtt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetAtt() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetAtt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAtt(::grpc::ServerContext* context, const ::dfs_service::request* request, ::dfs_service::File* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_StoreFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_StoreFile() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_StoreFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoreFile(::grpc::ServerContext* context, ::grpc::ServerReader< ::dfs_service::File>* reader, ::dfs_service::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStoreFile(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FetchFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_FetchFile() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_FetchFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchFile(::grpc::ServerContext* context, const ::dfs_service::request* request, ::grpc::ServerWriter< ::dfs_service::File>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFetchFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListFiles() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ListFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFiles(::grpc::ServerContext* context, const ::dfs_service::Empty* request, ::grpc::ServerWriter< ::dfs_service::File>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListFiles(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAtt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetAtt() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetAtt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAtt(::grpc::ServerContext* context, const ::dfs_service::request* request, ::dfs_service::File* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAtt(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StoreFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_StoreFile() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->StoreFile(); }));
    }
    ~ExperimentalWithRawCallbackMethod_StoreFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StoreFile(::grpc::ServerContext* context, ::grpc::ServerReader< ::dfs_service::File>* reader, ::dfs_service::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerReadReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* StoreFile() {
      return new ::grpc::internal::UnimplementedReadReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_FetchFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_FetchFile() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->FetchFile(); }));
    }
    ~ExperimentalWithRawCallbackMethod_FetchFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FetchFile(::grpc::ServerContext* context, const ::dfs_service::request* request, ::grpc::ServerWriter< ::dfs_service::File>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* FetchFile() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ListFiles() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->ListFiles(); }));
    }
    ~ExperimentalWithRawCallbackMethod_ListFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListFiles(::grpc::ServerContext* context, const ::dfs_service::Empty* request, ::grpc::ServerWriter< ::dfs_service::File>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* ListFiles() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetAtt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetAtt() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetAtt(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetAtt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAtt(::grpc::ServerContext* context, const ::dfs_service::request* request, ::dfs_service::File* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetAtt(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAtt : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetAtt() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::dfs_service::request, ::dfs_service::File>(std::bind(&WithStreamedUnaryMethod_GetAtt<BaseClass>::StreamedGetAtt, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetAtt() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAtt(::grpc::ServerContext* context, const ::dfs_service::request* request, ::dfs_service::File* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAtt(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::dfs_service::request,::dfs_service::File>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetAtt<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_FetchFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_FetchFile() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler< ::dfs_service::request, ::dfs_service::File>(std::bind(&WithSplitStreamingMethod_FetchFile<BaseClass>::StreamedFetchFile, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_FetchFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FetchFile(::grpc::ServerContext* context, const ::dfs_service::request* request, ::grpc::ServerWriter< ::dfs_service::File>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedFetchFile(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::dfs_service::request,::dfs_service::File>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_ListFiles : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_ListFiles() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler< ::dfs_service::Empty, ::dfs_service::File>(std::bind(&WithSplitStreamingMethod_ListFiles<BaseClass>::StreamedListFiles, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_ListFiles() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListFiles(::grpc::ServerContext* context, const ::dfs_service::Empty* request, ::grpc::ServerWriter< ::dfs_service::File>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedListFiles(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::dfs_service::Empty,::dfs_service::File>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_FetchFile<WithSplitStreamingMethod_ListFiles<Service > > SplitStreamedService;
  typedef WithSplitStreamingMethod_FetchFile<WithSplitStreamingMethod_ListFiles<WithStreamedUnaryMethod_GetAtt<Service > > > StreamedService;
};

}  // namespace dfs_service


#endif  // GRPC_dfs_2dservice_2eproto__INCLUDED
