// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: dfs-service.proto

#include "dfs-service.pb.h"
#include "dfs-service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace dfs_service {

static const char* DFSService_method_names[] = {
  "/dfs_service.DFSService/StoreFile",
  "/dfs_service.DFSService/FetchFile",
  "/dfs_service.DFSService/ListFiles",
  "/dfs_service.DFSService/GetAtt",
};

std::unique_ptr< DFSService::Stub> DFSService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DFSService::Stub> stub(new DFSService::Stub(channel));
  return stub;
}

DFSService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_StoreFile_(DFSService_method_names[0], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_FetchFile_(DFSService_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ListFiles_(DFSService_method_names[2], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetAtt_(DFSService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientWriter< ::dfs_service::File>* DFSService::Stub::StoreFileRaw(::grpc::ClientContext* context, ::dfs_service::Empty* response) {
  return ::grpc::internal::ClientWriterFactory< ::dfs_service::File>::Create(channel_.get(), rpcmethod_StoreFile_, context, response);
}

void DFSService::Stub::experimental_async::StoreFile(::grpc::ClientContext* context, ::dfs_service::Empty* response, ::grpc::experimental::ClientWriteReactor< ::dfs_service::File>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::dfs_service::File>::Create(stub_->channel_.get(), stub_->rpcmethod_StoreFile_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::dfs_service::File>* DFSService::Stub::AsyncStoreFileRaw(::grpc::ClientContext* context, ::dfs_service::Empty* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::dfs_service::File>::Create(channel_.get(), cq, rpcmethod_StoreFile_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::dfs_service::File>* DFSService::Stub::PrepareAsyncStoreFileRaw(::grpc::ClientContext* context, ::dfs_service::Empty* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::dfs_service::File>::Create(channel_.get(), cq, rpcmethod_StoreFile_, context, response, false, nullptr);
}

::grpc::ClientReader< ::dfs_service::File>* DFSService::Stub::FetchFileRaw(::grpc::ClientContext* context, const ::dfs_service::request& request) {
  return ::grpc::internal::ClientReaderFactory< ::dfs_service::File>::Create(channel_.get(), rpcmethod_FetchFile_, context, request);
}

void DFSService::Stub::experimental_async::FetchFile(::grpc::ClientContext* context, ::dfs_service::request* request, ::grpc::experimental::ClientReadReactor< ::dfs_service::File>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::dfs_service::File>::Create(stub_->channel_.get(), stub_->rpcmethod_FetchFile_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::dfs_service::File>* DFSService::Stub::AsyncFetchFileRaw(::grpc::ClientContext* context, const ::dfs_service::request& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::dfs_service::File>::Create(channel_.get(), cq, rpcmethod_FetchFile_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::dfs_service::File>* DFSService::Stub::PrepareAsyncFetchFileRaw(::grpc::ClientContext* context, const ::dfs_service::request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::dfs_service::File>::Create(channel_.get(), cq, rpcmethod_FetchFile_, context, request, false, nullptr);
}

::grpc::ClientReader< ::dfs_service::File>* DFSService::Stub::ListFilesRaw(::grpc::ClientContext* context, const ::dfs_service::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::dfs_service::File>::Create(channel_.get(), rpcmethod_ListFiles_, context, request);
}

void DFSService::Stub::experimental_async::ListFiles(::grpc::ClientContext* context, ::dfs_service::Empty* request, ::grpc::experimental::ClientReadReactor< ::dfs_service::File>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::dfs_service::File>::Create(stub_->channel_.get(), stub_->rpcmethod_ListFiles_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::dfs_service::File>* DFSService::Stub::AsyncListFilesRaw(::grpc::ClientContext* context, const ::dfs_service::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::dfs_service::File>::Create(channel_.get(), cq, rpcmethod_ListFiles_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::dfs_service::File>* DFSService::Stub::PrepareAsyncListFilesRaw(::grpc::ClientContext* context, const ::dfs_service::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::dfs_service::File>::Create(channel_.get(), cq, rpcmethod_ListFiles_, context, request, false, nullptr);
}

::grpc::Status DFSService::Stub::GetAtt(::grpc::ClientContext* context, const ::dfs_service::request& request, ::dfs_service::File* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAtt_, context, request, response);
}

void DFSService::Stub::experimental_async::GetAtt(::grpc::ClientContext* context, const ::dfs_service::request* request, ::dfs_service::File* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAtt_, context, request, response, std::move(f));
}

void DFSService::Stub::experimental_async::GetAtt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs_service::File* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAtt_, context, request, response, std::move(f));
}

void DFSService::Stub::experimental_async::GetAtt(::grpc::ClientContext* context, const ::dfs_service::request* request, ::dfs_service::File* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAtt_, context, request, response, reactor);
}

void DFSService::Stub::experimental_async::GetAtt(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::dfs_service::File* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAtt_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::dfs_service::File>* DFSService::Stub::AsyncGetAttRaw(::grpc::ClientContext* context, const ::dfs_service::request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dfs_service::File>::Create(channel_.get(), cq, rpcmethod_GetAtt_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::dfs_service::File>* DFSService::Stub::PrepareAsyncGetAttRaw(::grpc::ClientContext* context, const ::dfs_service::request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::dfs_service::File>::Create(channel_.get(), cq, rpcmethod_GetAtt_, context, request, false);
}

DFSService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DFSService_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< DFSService::Service, ::dfs_service::File, ::dfs_service::Empty>(
          std::mem_fn(&DFSService::Service::StoreFile), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DFSService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< DFSService::Service, ::dfs_service::request, ::dfs_service::File>(
          std::mem_fn(&DFSService::Service::FetchFile), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DFSService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< DFSService::Service, ::dfs_service::Empty, ::dfs_service::File>(
          std::mem_fn(&DFSService::Service::ListFiles), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DFSService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DFSService::Service, ::dfs_service::request, ::dfs_service::File>(
          std::mem_fn(&DFSService::Service::GetAtt), this)));
}

DFSService::Service::~Service() {
}

::grpc::Status DFSService::Service::StoreFile(::grpc::ServerContext* context, ::grpc::ServerReader< ::dfs_service::File>* reader, ::dfs_service::Empty* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DFSService::Service::FetchFile(::grpc::ServerContext* context, const ::dfs_service::request* request, ::grpc::ServerWriter< ::dfs_service::File>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DFSService::Service::ListFiles(::grpc::ServerContext* context, const ::dfs_service::Empty* request, ::grpc::ServerWriter< ::dfs_service::File>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DFSService::Service::GetAtt(::grpc::ServerContext* context, const ::dfs_service::request* request, ::dfs_service::File* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace dfs_service

