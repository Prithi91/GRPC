// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dfs-service.proto

#ifndef PROTOBUF_INCLUDED_dfs_2dservice_2eproto
#define PROTOBUF_INCLUDED_dfs_2dservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dfs_2dservice_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_dfs_2dservice_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_dfs_2dservice_2eproto();
namespace dfs_service {
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class File;
class FileDefaultTypeInternal;
extern FileDefaultTypeInternal _File_default_instance_;
class FileList;
class FileListDefaultTypeInternal;
extern FileListDefaultTypeInternal _FileList_default_instance_;
class Request;
class RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
}  // namespace dfs_service
namespace google {
namespace protobuf {
template<> ::dfs_service::Empty* Arena::CreateMaybeMessage<::dfs_service::Empty>(Arena*);
template<> ::dfs_service::File* Arena::CreateMaybeMessage<::dfs_service::File>(Arena*);
template<> ::dfs_service::FileList* Arena::CreateMaybeMessage<::dfs_service::FileList>(Arena*);
template<> ::dfs_service::Request* Arena::CreateMaybeMessage<::dfs_service::Request>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace dfs_service {

// ===================================================================

class FileList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfs_service.FileList) */ {
 public:
  FileList();
  virtual ~FileList();

  FileList(const FileList& from);

  inline FileList& operator=(const FileList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileList(FileList&& from) noexcept
    : FileList() {
    *this = ::std::move(from);
  }

  inline FileList& operator=(FileList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FileList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileList* internal_default_instance() {
    return reinterpret_cast<const FileList*>(
               &_FileList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(FileList* other);
  friend void swap(FileList& a, FileList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileList* New() const final {
    return CreateMaybeMessage<FileList>(nullptr);
  }

  FileList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FileList& from);
  void MergeFrom(const FileList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .dfs_service.File file_list = 1;
  int file_list_size() const;
  void clear_file_list();
  static const int kFileListFieldNumber = 1;
  ::dfs_service::File* mutable_file_list(int index);
  ::google::protobuf::RepeatedPtrField< ::dfs_service::File >*
      mutable_file_list();
  const ::dfs_service::File& file_list(int index) const;
  ::dfs_service::File* add_file_list();
  const ::google::protobuf::RepeatedPtrField< ::dfs_service::File >&
      file_list() const;

  // @@protoc_insertion_point(class_scope:dfs_service.FileList)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::dfs_service::File > file_list_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dfs_2dservice_2eproto;
};
// -------------------------------------------------------------------

class File final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfs_service.File) */ {
 public:
  File();
  virtual ~File();

  File(const File& from);

  inline File& operator=(const File& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  File(File&& from) noexcept
    : File() {
    *this = ::std::move(from);
  }

  inline File& operator=(File&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const File& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const File* internal_default_instance() {
    return reinterpret_cast<const File*>(
               &_File_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(File* other);
  friend void swap(File& a, File& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline File* New() const final {
    return CreateMaybeMessage<File>(nullptr);
  }

  File* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<File>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const File& from);
  void MergeFrom(const File& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(File* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string file_name = 1;
  void clear_file_name();
  static const int kFileNameFieldNumber = 1;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_file_name(::std::string&& value);
  #endif
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // bytes file_chunk = 5;
  void clear_file_chunk();
  static const int kFileChunkFieldNumber = 5;
  const ::std::string& file_chunk() const;
  void set_file_chunk(const ::std::string& value);
  #if LANG_CXX11
  void set_file_chunk(::std::string&& value);
  #endif
  void set_file_chunk(const char* value);
  void set_file_chunk(const void* value, size_t size);
  ::std::string* mutable_file_chunk();
  ::std::string* release_file_chunk();
  void set_allocated_file_chunk(::std::string* file_chunk);

  // uint64 file_mtime = 3;
  void clear_file_mtime();
  static const int kFileMtimeFieldNumber = 3;
  ::google::protobuf::uint64 file_mtime() const;
  void set_file_mtime(::google::protobuf::uint64 value);

  // uint64 file_ctime = 4;
  void clear_file_ctime();
  static const int kFileCtimeFieldNumber = 4;
  ::google::protobuf::uint64 file_ctime() const;
  void set_file_ctime(::google::protobuf::uint64 value);

  // int32 file_size = 2;
  void clear_file_size();
  static const int kFileSizeFieldNumber = 2;
  ::google::protobuf::int32 file_size() const;
  void set_file_size(::google::protobuf::int32 value);

  // uint32 file_csum = 6;
  void clear_file_csum();
  static const int kFileCsumFieldNumber = 6;
  ::google::protobuf::uint32 file_csum() const;
  void set_file_csum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:dfs_service.File)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  ::google::protobuf::internal::ArenaStringPtr file_chunk_;
  ::google::protobuf::uint64 file_mtime_;
  ::google::protobuf::uint64 file_ctime_;
  ::google::protobuf::int32 file_size_;
  ::google::protobuf::uint32 file_csum_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dfs_2dservice_2eproto;
};
// -------------------------------------------------------------------

class Request final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfs_service.Request) */ {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(Request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Request* other);
  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return CreateMaybeMessage<Request>(nullptr);
  }

  Request* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string file_name = 2;
  void clear_file_name();
  static const int kFileNameFieldNumber = 2;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_file_name(::std::string&& value);
  #endif
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // string client_id = 3;
  void clear_client_id();
  static const int kClientIdFieldNumber = 3;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  #if LANG_CXX11
  void set_client_id(::std::string&& value);
  #endif
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);

  // bytes file_chunk = 5;
  void clear_file_chunk();
  static const int kFileChunkFieldNumber = 5;
  const ::std::string& file_chunk() const;
  void set_file_chunk(const ::std::string& value);
  #if LANG_CXX11
  void set_file_chunk(::std::string&& value);
  #endif
  void set_file_chunk(const char* value);
  void set_file_chunk(const void* value, size_t size);
  ::std::string* mutable_file_chunk();
  ::std::string* release_file_chunk();
  void set_allocated_file_chunk(::std::string* file_chunk);

  // int32 file_size = 4;
  void clear_file_size();
  static const int kFileSizeFieldNumber = 4;
  ::google::protobuf::int32 file_size() const;
  void set_file_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:dfs_service.Request)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  ::google::protobuf::internal::ArenaStringPtr file_chunk_;
  ::google::protobuf::int32 file_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dfs_2dservice_2eproto;
};
// -------------------------------------------------------------------

class Empty final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:dfs_service.Empty) */ {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Empty* other);
  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(nullptr);
  }

  Empty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:dfs_service.Empty)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dfs_2dservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FileList

// repeated .dfs_service.File file_list = 1;
inline int FileList::file_list_size() const {
  return file_list_.size();
}
inline void FileList::clear_file_list() {
  file_list_.Clear();
}
inline ::dfs_service::File* FileList::mutable_file_list(int index) {
  // @@protoc_insertion_point(field_mutable:dfs_service.FileList.file_list)
  return file_list_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::dfs_service::File >*
FileList::mutable_file_list() {
  // @@protoc_insertion_point(field_mutable_list:dfs_service.FileList.file_list)
  return &file_list_;
}
inline const ::dfs_service::File& FileList::file_list(int index) const {
  // @@protoc_insertion_point(field_get:dfs_service.FileList.file_list)
  return file_list_.Get(index);
}
inline ::dfs_service::File* FileList::add_file_list() {
  // @@protoc_insertion_point(field_add:dfs_service.FileList.file_list)
  return file_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::dfs_service::File >&
FileList::file_list() const {
  // @@protoc_insertion_point(field_list:dfs_service.FileList.file_list)
  return file_list_;
}

// -------------------------------------------------------------------

// File

// string file_name = 1;
inline void File::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& File::file_name() const {
  // @@protoc_insertion_point(field_get:dfs_service.File.file_name)
  return file_name_.GetNoArena();
}
inline void File::set_file_name(const ::std::string& value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfs_service.File.file_name)
}
#if LANG_CXX11
inline void File::set_file_name(::std::string&& value) {
  
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dfs_service.File.file_name)
}
#endif
inline void File::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfs_service.File.file_name)
}
inline void File::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfs_service.File.file_name)
}
inline ::std::string* File::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:dfs_service.File.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* File::release_file_name() {
  // @@protoc_insertion_point(field_release:dfs_service.File.file_name)
  
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void File::set_allocated_file_name(::std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:dfs_service.File.file_name)
}

// int32 file_size = 2;
inline void File::clear_file_size() {
  file_size_ = 0;
}
inline ::google::protobuf::int32 File::file_size() const {
  // @@protoc_insertion_point(field_get:dfs_service.File.file_size)
  return file_size_;
}
inline void File::set_file_size(::google::protobuf::int32 value) {
  
  file_size_ = value;
  // @@protoc_insertion_point(field_set:dfs_service.File.file_size)
}

// uint64 file_mtime = 3;
inline void File::clear_file_mtime() {
  file_mtime_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 File::file_mtime() const {
  // @@protoc_insertion_point(field_get:dfs_service.File.file_mtime)
  return file_mtime_;
}
inline void File::set_file_mtime(::google::protobuf::uint64 value) {
  
  file_mtime_ = value;
  // @@protoc_insertion_point(field_set:dfs_service.File.file_mtime)
}

// uint64 file_ctime = 4;
inline void File::clear_file_ctime() {
  file_ctime_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 File::file_ctime() const {
  // @@protoc_insertion_point(field_get:dfs_service.File.file_ctime)
  return file_ctime_;
}
inline void File::set_file_ctime(::google::protobuf::uint64 value) {
  
  file_ctime_ = value;
  // @@protoc_insertion_point(field_set:dfs_service.File.file_ctime)
}

// uint32 file_csum = 6;
inline void File::clear_file_csum() {
  file_csum_ = 0u;
}
inline ::google::protobuf::uint32 File::file_csum() const {
  // @@protoc_insertion_point(field_get:dfs_service.File.file_csum)
  return file_csum_;
}
inline void File::set_file_csum(::google::protobuf::uint32 value) {
  
  file_csum_ = value;
  // @@protoc_insertion_point(field_set:dfs_service.File.file_csum)
}

// bytes file_chunk = 5;
inline void File::clear_file_chunk() {
  file_chunk_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& File::file_chunk() const {
  // @@protoc_insertion_point(field_get:dfs_service.File.file_chunk)
  return file_chunk_.GetNoArena();
}
inline void File::set_file_chunk(const ::std::string& value) {
  
  file_chunk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfs_service.File.file_chunk)
}
#if LANG_CXX11
inline void File::set_file_chunk(::std::string&& value) {
  
  file_chunk_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dfs_service.File.file_chunk)
}
#endif
inline void File::set_file_chunk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_chunk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfs_service.File.file_chunk)
}
inline void File::set_file_chunk(const void* value, size_t size) {
  
  file_chunk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfs_service.File.file_chunk)
}
inline ::std::string* File::mutable_file_chunk() {
  
  // @@protoc_insertion_point(field_mutable:dfs_service.File.file_chunk)
  return file_chunk_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* File::release_file_chunk() {
  // @@protoc_insertion_point(field_release:dfs_service.File.file_chunk)
  
  return file_chunk_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void File::set_allocated_file_chunk(::std::string* file_chunk) {
  if (file_chunk != nullptr) {
    
  } else {
    
  }
  file_chunk_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_chunk);
  // @@protoc_insertion_point(field_set_allocated:dfs_service.File.file_chunk)
}

// -------------------------------------------------------------------

// Request

// string file_name = 2;
inline void Request::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::file_name() const {
  // @@protoc_insertion_point(field_get:dfs_service.Request.file_name)
  return file_name_.GetNoArena();
}
inline void Request::set_file_name(const ::std::string& value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfs_service.Request.file_name)
}
#if LANG_CXX11
inline void Request::set_file_name(::std::string&& value) {
  
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dfs_service.Request.file_name)
}
#endif
inline void Request::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfs_service.Request.file_name)
}
inline void Request::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfs_service.Request.file_name)
}
inline ::std::string* Request::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:dfs_service.Request.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_file_name() {
  // @@protoc_insertion_point(field_release:dfs_service.Request.file_name)
  
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_file_name(::std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:dfs_service.Request.file_name)
}

// string client_id = 3;
inline void Request::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::client_id() const {
  // @@protoc_insertion_point(field_get:dfs_service.Request.client_id)
  return client_id_.GetNoArena();
}
inline void Request::set_client_id(const ::std::string& value) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfs_service.Request.client_id)
}
#if LANG_CXX11
inline void Request::set_client_id(::std::string&& value) {
  
  client_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dfs_service.Request.client_id)
}
#endif
inline void Request::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfs_service.Request.client_id)
}
inline void Request::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfs_service.Request.client_id)
}
inline ::std::string* Request::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:dfs_service.Request.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_client_id() {
  // @@protoc_insertion_point(field_release:dfs_service.Request.client_id)
  
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_client_id(::std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:dfs_service.Request.client_id)
}

// int32 file_size = 4;
inline void Request::clear_file_size() {
  file_size_ = 0;
}
inline ::google::protobuf::int32 Request::file_size() const {
  // @@protoc_insertion_point(field_get:dfs_service.Request.file_size)
  return file_size_;
}
inline void Request::set_file_size(::google::protobuf::int32 value) {
  
  file_size_ = value;
  // @@protoc_insertion_point(field_set:dfs_service.Request.file_size)
}

// bytes file_chunk = 5;
inline void Request::clear_file_chunk() {
  file_chunk_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Request::file_chunk() const {
  // @@protoc_insertion_point(field_get:dfs_service.Request.file_chunk)
  return file_chunk_.GetNoArena();
}
inline void Request::set_file_chunk(const ::std::string& value) {
  
  file_chunk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dfs_service.Request.file_chunk)
}
#if LANG_CXX11
inline void Request::set_file_chunk(::std::string&& value) {
  
  file_chunk_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:dfs_service.Request.file_chunk)
}
#endif
inline void Request::set_file_chunk(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_chunk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dfs_service.Request.file_chunk)
}
inline void Request::set_file_chunk(const void* value, size_t size) {
  
  file_chunk_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dfs_service.Request.file_chunk)
}
inline ::std::string* Request::mutable_file_chunk() {
  
  // @@protoc_insertion_point(field_mutable:dfs_service.Request.file_chunk)
  return file_chunk_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Request::release_file_chunk() {
  // @@protoc_insertion_point(field_release:dfs_service.Request.file_chunk)
  
  return file_chunk_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Request::set_allocated_file_chunk(::std::string* file_chunk) {
  if (file_chunk != nullptr) {
    
  } else {
    
  }
  file_chunk_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_chunk);
  // @@protoc_insertion_point(field_set_allocated:dfs_service.Request.file_chunk)
}

// -------------------------------------------------------------------

// Empty

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dfs_service

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_dfs_2dservice_2eproto
